h=conf_matrix$overall[1]
for (i in 1:3){
for(j in 1:length(c)){
if(cl[j]== mod(i-1,3)+1){
cl[j]=mod(i,3)+1
if(cl[j] == mod(i,3)+1{cl[j]=mod(i-1,3)+1})
}
}
print(cl)
conf_matrix =confusionMatrix(table(true=seeds$type,pred=cl))
print(conf_matrix$overall[1])
if (conf_matrix$overall[1]>h)
{a=cl}
}
return(cl)
}
correct=function(cl){
a=cl
conf_matrix =confusionMatrix(table(true=seeds$type,pred=cl))
h=conf_matrix$overall[1]
for (i in 1:3){
for(j in 1:length(c)){
if(cl[j]== mod(i-1,3)+1){
cl[j]=mod(i,3)+1}
if(cl[j] == mod(i,3)+1){cl[j]=mod(i-1,3)+1}
}
print(cl)
conf_matrix =confusionMatrix(table(true=seeds$type,pred=cl))
print(conf_matrix$overall[1])
if (conf_matrix$overall[1]>h)
{a=cl}
}
return(cl)
}
classes_kmeans = fitted(kmeans_clust, method="classes")
#KMeans
kmeans_clust = kmeans(X, 3, iter.max=50, nstart=10)
classes_kmeans = fitted(kmeans_clust, method="classes")
conf_matrix_kmeans = table(true=seeds$type,pred=classes_kmeans)
conf_matrix_kmeans
#Confusion matrix - kmeans clustering
classes_kmeans=correct(classes_kmeans)
correct=function(cl){
a=cl
conf_matrix =confusionMatrix(table(true=seeds$type,pred=cl))
h=conf_matrix$overall[1]
for (i in 1:3){
for(j in 1:length(cl)){
if(cl[j]== mod(i-1,3)+1){
cl[j]=mod(i,3)+1}
if(cl[j] == mod(i,3)+1){cl[j]=mod(i-1,3)+1}
}
print(cl)
conf_matrix =confusionMatrix(table(true=seeds$type,pred=cl))
print(conf_matrix$overall[1])
if (conf_matrix$overall[1]>h)
{a=cl}
}
return(cl)
}
#Confusion matrix - kmeans clustering
classes_kmeans=correct(classes_kmeans)
#Confusion matrix - kmeans clustering
classes_kmeans=correct(classes_kmeans)
classes_kmeans = fitted(kmeans_clust, method="classes")
classes_kmeans
correct=function(cl){
a=cl
conf_matrix =confusionMatrix(table(true=seeds$type,pred=cl))
h=conf_matrix$overall[1]
for (i in 1:5){
for(j in 1:length(cl)){
if(cl[j]== mod(i-1,3)+1){
cl[j]=mod(i,3)+1}
if(cl[j] == mod(i,3)+1){cl[j]=mod(i-1,3)+1}
}
print(cl)
conf_matrix =confusionMatrix(table(true=seeds$type,pred=cl))
print(conf_matrix$overall[1])
if (conf_matrix$overall[1]>h)
{a=cl}
}
return(a)
}
#Confusion matrix - kmeans clustering
classes_kmeans=correct(classes_kmeans)
length(cl)
length(classes_kmeans)
classes_kmeans[63]== mod(i-1,3)+1
classes_kmeans[64]== mod(i-1,3)+1
classes_kmeans[65]== mod(i-1,3)+1
classes_kmeans = fitted(kmeans_clust, method="classes")
#KMeans
kmeans_clust = kmeans(X, 3, iter.max=50, nstart=10)
classes_kmeans = fitted(kmeans_clust, method="classes")
classes_kmeans
conf_matrix_kmeans = table(true=seeds$type,pred=classes_kmeans)
conf_matrix_kmeans
#Confusion matrix - kmeans clustering
classes_kmeans=correct(classes_kmeans)
correct=function(cl){
a=cl
conf_matrix =confusionMatrix(table(true=seeds$type,pred=cl))
h=conf_matrix$overall[1]
for (i in 1:5){
for(j in 1:length(cl)){
if(cl[j]== mod(i-1,3)+1){
cl[j]=mod(i,3)+1}
else if(cl[j] == mod(i,3)+1){
cl[j]=mod(i-1,3)+1}
}
print(cl)
conf_matrix =confusionMatrix(table(true=seeds$type,pred=cl))
print(conf_matrix$overall[1])
if (conf_matrix$overall[1]>h)
{a=cl}
}
return(a)
}
#Confusion matrix - kmeans clustering
classes_kmeans=correct(classes_kmeans)
conf_matrix_kmeans = table(true=seeds$type,pred=classes_kmeans)
conf_matrix_kmeans
conf_matrix_kmeans = table(true=seeds$type,pred=classes_kmeans)
conf_matrix_kmeans
confusionMatrix(table(true=seeds$type,pred=classes_kmeans))
correct=function(cl){
a=cl
conf_matrix =confusionMatrix(table(true=seeds$type,pred=cl))
h=conf_matrix$overall[1]
for (i in 1:5){
for(j in 1:length(cl)){
if(cl[j]== mod(i-1,3)+1){
cl[j]=mod(i,3)+1}
else if(cl[j] == mod(i,3)+1){
cl[j]=mod(i-1,3)+1}
}
print(cl)
conf_matrix =confusionMatrix(table(true=seeds$type,pred=cl))
print(conf_matrix$overall[1])
if (conf_matrix$overall[1]>h)
{ h= conf_matrix$overall[1]
a=cl}
}
return(a)
}
kmeans_clust = kmeans(X, 3, iter.max=50, nstart=10)
classes_kmeans = fitted(kmeans_clust, method="classes")
conf_matrix_kmeans = table(true=seeds$type,pred=classes_kmeans)
conf_matrix_kmeans
#Confusion matrix - kmeans clustering
classes_kmeans=correct(classes_kmeans)
conf_matrix_kmeans = table(true=seeds$type,pred=classes_kmeans)
conf_matrix_kmeans
#Accuracy - kmeans clustering
acc_kmeans = tr(conf_matrix_kmeans)/210
print(paste("KMeans Clustering accuracy = ", toString(acc_kmeans)))
kmeans_clust = kmeans(X, 3, iter.max=50, nstart=10)
classes_kmeans = fitted(kmeans_clust, method="classes")
#Confusion matrix - kmeans clustering
classes_kmeans=correct(classes_kmeans)
conf_matrix_kmeans = table(true=seeds$type,pred=classes_kmeans)
conf_matrix_kmeans
correct=function(cl){
a=cl
conf_matrix =confusionMatrix(table(true=seeds$type,pred=cl))
h=conf_matrix$overall[1]
for (i in 1:6){
for(j in 1:length(cl)){
if(cl[j]== mod(i-1,3)+1){
cl[j]=mod(i,3)+1}
else if(cl[j] == mod(i,3)+1){
cl[j]=mod(i-1,3)+1}
}
conf_matrix =confusionMatrix(table(true=seeds$type,pred=cl))
print(conf_matrix$overall[1])
if (conf_matrix$overall[1]>h)
{ h= conf_matrix$overall[1]
a=cl}
}
return(a)
}
library(tidyverse)
library(dplyr)
library(rpart)
library(naniar)
library(FactoMineR)
library(fitdistrplus)
library(Hmisc)
library(MASS)
library(rcompanion)
library(lsr)
require(corrr)
library(stats)
library(e1071)
library(GGally)
ggpairs(seeds, aes(colour = Species, alpha = 0.4))
library(caret)
library(missMDA)
library(fastDummies)
library(mice)
library(reshape2)
library(ggplot2)
library(devtools)
library(ggbiplot)
library(fBasics)
library(corrplot)
#install_github("vqv/ggbiplot")
seeds = read.delim("~/GitHub/ProjectAM/Data/seeds_dataset.txt")
str(seeds)
seeds$type=as.factor(seeds$type)
#secondary function
mixed_assoc = function(df, cor_method="spearman", adjust_cramersv_bias=TRUE){
df_comb = expand.grid(names(df), names(df),  stringsAsFactors = F) %>% set_names("X1", "X2")
is_nominal = function(x) class(x) %in% c("factor", "character")
# https://community.rstudio.com/t/why-is-purr-is-numeric-deprecated/3559
# https://github.com/r-lib/rlang/issues/781
is_numeric <- function(x) { is.integer(x) || is_double(x)}
f = function(xName,yName) {
x =  pull(df, xName)
y =  pull(df, yName)
result = if(is_nominal(x) && is_nominal(y)){
# use bias corrected cramersV as described in https://rdrr.io/cran/rcompanion/man/cramerV.html
cv = cramerV(as.character(x), as.character(y), bias.correct = adjust_cramersv_bias)
data.frame(xName, yName, assoc=cv, type="cramersV")
}else if(is_numeric(x) && is_numeric(y)){
correlation = cor(x, y, method=cor_method, use="complete.obs")
data.frame(xName, yName, assoc=correlation, type="correlation")
}else if(is_numeric(x) && is_nominal(y)){
# from https://stats.stackexchange.com/questions/119835/correlation-between-a-nominal-iv-and-a-continuous-dv-variable/124618#124618
r_squared = summary(lm(x ~ y))$r.squared
data.frame(xName, yName, assoc=sqrt(r_squared), type="anova")
}else if(is_nominal(x) && is_numeric(y)){
r_squared = summary(lm(y ~x))$r.squared
data.frame(xName, yName, assoc=sqrt(r_squared), type="anova")
}else {
warning(paste("unmatched column type combination: ", class(x), class(y)))
}
# finally add complete obs number and ratio to table
result %>% mutate(complete_obs_pairs=sum(!is.na(x) & !is.na(y)), complete_obs_ratio=complete_obs_pairs/length(x)) %>% rename(x=xName, y=yName)
}
# apply function to each variable combination
map2_df(df_comb$X1, df_comb$X2, f)
}
##Preliminary Analysis (Frank) --- Standardization, Plots...
#summary of the data
summary(seeds)
#Scaling variables
#seeds = cbind(scale(seeds[1:7]),seeds[8])
#conditional density estimate
ggplot(data = seeds, mapping = aes(x = area, fill= type,colour = type)) +
geom_density(alpha = 0.5,position = "fill")
d <- melt(seeds[])
ggplot(d,aes(x = value,fill= type,colour = type)) +
facet_wrap(~variable,scales = "free_x") +
geom_freqpoly()
ggplot(d,aes(x = value,fill= type,colour = type)) +
facet_wrap(~variable,scales = "free_x") +
geom_area(stat = "bin")
#conditional density estimate
ggplot(d,aes(x = value, fill = type,colour = type)) +
facet_wrap(~variable,scales = "free_x") +
geom_density(alpha = 0.5,position = "fill")
ggplot(data=seeds,mapping = aes(x=type)) +
geom_bar()        # we have the same amount of each type of plant
pairs(seeds,col=seeds[,8])
ggpairs(seeds, aes(colour = type, alpha = 0.4))
#correlation
df_res = mixed_assoc(seeds)
# plot results
#Correlation plots
corMatrix = df_res %>%
ggplot(aes(x,y,fill=assoc))+
geom_tile()+
# geom_text(aes(x,y,label=assoc))+
scale_fill_gradient(low="red", high="yellow")+
theme_classic()
corMatrix
corrplot(cor(seeds[1:7]), type = "upper", order = "hclust", tl.col = "black", tl.srt = 45)
seeds %>%
mixed_assoc() %>%
dplyr::select(x, y, assoc) %>%
spread(y, assoc) %>%
column_to_rownames("x") %>%
as.matrix %>%
as_cordf %>%
network_plot()
#correlation
df_res = mixed_assoc(seeds)
#secondary function
mixed_assoc = function(df, cor_method="spearman", adjust_cramersv_bias=TRUE){
df_comb = expand.grid(names(df), names(df),  stringsAsFactors = F) %>% set_names("X1", "X2")
is_nominal = function(x) class(x) %in% c("factor", "character")
# https://community.rstudio.com/t/why-is-purr-is-numeric-deprecated/3559
# https://github.com/r-lib/rlang/issues/781
is_numeric <- function(x) { is.integer(x) || is_double(x)}
f = function(xName,yName) {
x =  pull(df, xName)
y =  pull(df, yName)
result = if(is_nominal(x) && is_nominal(y)){
# use bias corrected cramersV as described in https://rdrr.io/cran/rcompanion/man/cramerV.html
cv = cramerV(as.character(x), as.character(y), bias.correct = adjust_cramersv_bias)
data.frame(xName, yName, assoc=cv, type="cramersV")
}else if(is_numeric(x) && is_numeric(y)){
correlation = cor(x, y, method=cor_method, use="complete.obs")
data.frame(xName, yName, assoc=correlation, type="correlation")
}else if(is_numeric(x) && is_nominal(y)){
# from https://stats.stackexchange.com/questions/119835/correlation-between-a-nominal-iv-and-a-continuous-dv-variable/124618#124618
r_squared = summary(lm(x ~ y))$r.squared
data.frame(xName, yName, assoc=sqrt(r_squared), type="anova")
}else if(is_nominal(x) && is_numeric(y)){
r_squared = summary(lm(y ~x))$r.squared
data.frame(xName, yName, assoc=sqrt(r_squared), type="anova")
}else {
warning(paste("unmatched column type combination: ", class(x), class(y)))
}
# finally add complete obs number and ratio to table
result %>% mutate(complete_obs_pairs=sum(!is.na(x) & !is.na(y)), complete_obs_ratio=complete_obs_pairs/length(x)) %>% rename(x=xName, y=yName)
}
# apply function to each variable combination
map2_df(df_comb$X1, df_comb$X2, f)
}
#correlation
df_res = mixed_assoc(seeds)
#secondary function
mixed_assoc = function(df, cor_method="spearman", adjust_cramersv_bias=TRUE){
df_comb = expand.grid(names(df), names(df),  stringsAsFactors = F) %>% set_names("X1", "X2")
is_nominal = function(x) class(x) %in% c("factor", "character")
# https://community.rstudio.com/t/why-is-purr-is-numeric-deprecated/3559
# https://github.com/r-lib/rlang/issues/781
is_numeric <- function(x) { is.integer(x) || is_double(x)}
f = function(xName,yName) {
x =  pull(df, xName)
y =  pull(df, yName)
result = if(is_nominal(x) && is_nominal(y)){
# use bias corrected cramersV as described in https://rdrr.io/cran/rcompanion/man/cramerV.html
cv = cramerV(as.character(x), as.character(y), bias.correct = adjust_cramersv_bias)
data.frame(xName, yName, assoc=cv, type="cramersV")
}else if(is_numeric(x) && is_numeric(y)){
correlation = cor(x, y, method=cor_method, use="complete.obs")
data.frame(xName, yName, assoc=correlation, type="correlation")
}else if(is_numeric(x) && is_nominal(y)){
# from https://stats.stackexchange.com/questions/119835/correlation-between-a-nominal-iv-and-a-continuous-dv-variable/124618#124618
r_squared = summary(lm(x ~ y))$r.squared
data.frame(xName, yName, assoc=sqrt(r_squared), type="anova")
}else if(is_nominal(x) && is_numeric(y)){
r_squared = summary(lm(y ~x))$r.squared
data.frame(xName, yName, assoc=sqrt(r_squared), type="anova")
}else {
warning(paste("unmatched column type combination: ", class(x), class(y)))
}
# finally add complete obs number and ratio to table
result %>% mutate(complete_obs_pairs=sum(!is.na(x) & !is.na(y)), complete_obs_ratio=complete_obs_pairs/length(x)) %>% rename_(x=xName, y=yName)
}
# apply function to each variable combination
map2_df(df_comb$X1, df_comb$X2, f)
}
#correlation
df_res = mixed_assoc(seeds)
# finally add complete obs number and ratio to table
result %>% mutate(complete_obs_pairs=sum(!is.na(x) & !is.na(y)), complete_obs_ratio=complete_obs_pairs/length(x)) %>% rename(x=xName, y=yName)
#secondary function
mixed_assoc = function(df, cor_method="spearman", adjust_cramersv_bias=TRUE){
df_comb = expand.grid(names(df), names(df),  stringsAsFactors = F) %>% set_names("X1", "X2")
is_nominal = function(x) class(x) %in% c("factor", "character")
# https://community.rstudio.com/t/why-is-purr-is-numeric-deprecated/3559
# https://github.com/r-lib/rlang/issues/781
is_numeric <- function(x) { is.integer(x) || is_double(x)}
f = function(xName,yName) {
x =  pull(df, xName)
y =  pull(df, yName)
result = if(is_nominal(x) && is_nominal(y)){
# use bias corrected cramersV as described in https://rdrr.io/cran/rcompanion/man/cramerV.html
cv = cramerV(as.character(x), as.character(y), bias.correct = adjust_cramersv_bias)
data.frame(xName, yName, assoc=cv, type="cramersV")
}else if(is_numeric(x) && is_numeric(y)){
correlation = cor(x, y, method=cor_method, use="complete.obs")
data.frame(xName, yName, assoc=correlation, type="correlation")
}else if(is_numeric(x) && is_nominal(y)){
# from https://stats.stackexchange.com/questions/119835/correlation-between-a-nominal-iv-and-a-continuous-dv-variable/124618#124618
r_squared = summary(lm(x ~ y))$r.squared
data.frame(xName, yName, assoc=sqrt(r_squared), type="anova")
}else if(is_nominal(x) && is_numeric(y)){
r_squared = summary(lm(y ~x))$r.squared
data.frame(xName, yName, assoc=sqrt(r_squared), type="anova")
}else {
warning(paste("unmatched column type combination: ", class(x), class(y)))
}
# finally add complete obs number and ratio to table
result %>% mutate(complete_obs_pairs=sum(!is.na(x) & !is.na(y)), complete_obs_ratio=complete_obs_pairs/length(x)) %>% rename(x=xName, y=yName)
}
# apply function to each variable combination
map2_df(df_comb$X1, df_comb$X2, f)
}
#correlation
df_res = mixed_assoc(seeds)
library(plyr)
#secondary function
mixed_assoc = function(df, cor_method="spearman", adjust_cramersv_bias=TRUE){
df_comb = expand.grid(names(df), names(df),  stringsAsFactors = F) %>% set_names("X1", "X2")
is_nominal = function(x) class(x) %in% c("factor", "character")
# https://community.rstudio.com/t/why-is-purr-is-numeric-deprecated/3559
# https://github.com/r-lib/rlang/issues/781
is_numeric <- function(x) { is.integer(x) || is_double(x)}
f = function(xName,yName) {
x =  pull(df, xName)
y =  pull(df, yName)
result = if(is_nominal(x) && is_nominal(y)){
# use bias corrected cramersV as described in https://rdrr.io/cran/rcompanion/man/cramerV.html
cv = cramerV(as.character(x), as.character(y), bias.correct = adjust_cramersv_bias)
data.frame(xName, yName, assoc=cv, type="cramersV")
}else if(is_numeric(x) && is_numeric(y)){
correlation = cor(x, y, method=cor_method, use="complete.obs")
data.frame(xName, yName, assoc=correlation, type="correlation")
}else if(is_numeric(x) && is_nominal(y)){
# from https://stats.stackexchange.com/questions/119835/correlation-between-a-nominal-iv-and-a-continuous-dv-variable/124618#124618
r_squared = summary(lm(x ~ y))$r.squared
data.frame(xName, yName, assoc=sqrt(r_squared), type="anova")
}else if(is_nominal(x) && is_numeric(y)){
r_squared = summary(lm(y ~x))$r.squared
data.frame(xName, yName, assoc=sqrt(r_squared), type="anova")
}else {
warning(paste("unmatched column type combination: ", class(x), class(y)))
}
# finally add complete obs number and ratio to table
result %>% mutate(complete_obs_pairs=sum(!is.na(x) & !is.na(y)), complete_obs_ratio=complete_obs_pairs/length(x)) %>% rename(x=xName, y=yName)
}
# apply function to each variable combination
map2_df(df_comb$X1, df_comb$X2, f)
}
#correlation
df_res = mixed_assoc(seeds)
install.packages("corrplot")
library(tidyverse)
library(dplyr)
library(rpart)
library(naniar)
library(FactoMineR)
library(fitdistrplus)
library(Hmisc)
library(MASS)
library(rcompanion)
library(lsr)
require(corrr)
library(stats)
library(e1071)
library(GGally)
ggpairs(seeds, aes(colour = Species, alpha = 0.4))
library(caret)
library(missMDA)
library(fastDummies)
library(mice)
library(reshape2)
library(ggplot2)
library(devtools)
library(ggbiplot)
library(fBasics)
library(corrplot)
library(tidyverse)
library(dplyr)
library(rpart)
library(naniar)
library(FactoMineR)
library(fitdistrplus)
library(Hmisc)
library(MASS)
library(rcompanion)
library(lsr)
require(corrr)
library(stats)
library(e1071)
library(GGally)
ggpairs(seeds, aes(colour = Species, alpha = 0.4))
library(caret)
library(missMDA)
library(fastDummies)
library(mice)
library(reshape2)
library(ggplot2)
library(devtools)
#correlation
df_res = mixed_assoc(seeds)
library(tidyverse)
library(dplyr)
library(rpart)
library(naniar)
library(FactoMineR)
library(fitdistrplus)
library(Hmisc)
library(MASS)
library(rcompanion)
library(lsr)
require(corrr)
library(stats)
library(e1071)
library(GGally)
ggpairs(seeds, aes(colour = Species, alpha = 0.4))
library(caret)
library(missMDA)
library(fastDummies)
library(mice)
library(reshape2)
library(ggplot2)
library(devtools)
library(ggbiplot)
library(fBasics)
library(corrplot)
library(numbers)
install.packages(c("mice","GGally","fastDummies","missMDA", "caret", "corrr", "dplyr", "e1071", "FactoMineR", "fitdistrplus", "Hmisc", "lsr", "naniar", "rcompanion", "tidyverse", "devtools", "fBasics"))
install.packages(c("mice", "GGally", "fastDummies", "missMDA", "caret", "corrr", "dplyr", "e1071", "FactoMineR", "fitdistrplus", "Hmisc", "lsr", "naniar", "rcompanion", "tidyverse", "devtools", "fBasics"))
install.packages(c("mice", "GGally", "fastDummies", "missMDA", "caret", "corrr", "dplyr", "e1071", "FactoMineR", "fitdistrplus", "Hmisc", "lsr", "naniar", "rcompanion", "tidyverse", "devtools", "fBasics"))
install.packages(c("mice","GGally","fastDummies","missMDA", "caret", "corrr", "dplyr", "e1071", "FactoMineR", "fitdistrplus", "Hmisc", "lsr", "naniar", "rcompanion", "tidyverse", "devtools", "fBasics"))
