read.csv("income_evaluation.csv")
read.csv("income_evaluation.csv")
setwd('C:\Users\Frank Cold\Documents\GitHub\ProjectAM')
income_evaluation <- read.csv("~/GitHub/ProjectAM/Data/adult.csv")
library(tidyverse)
library(dplyr)
income_evaluation <- read.csv("~/GitHub/ProjectAM/Data/adult.csv")
#1 Data treatment
plot(education.num ~ education, data=income_evaluation)
# since higher education level can be completely explained by education years
# the variable higher education level is removed
income_evaluation = income_evaluation[,-c(4)]
for(i in 1:nrow(income_evaluation)){
if(income_evaluation$native.country[i]== "?"){income_evaluation$native.country[i]="NA"}
}
View(income_evaluation)
library(naniar)
install.packages("naniar")
income_evaluation <- read.csv("~/GitHub/ProjectAM/Data/adult.csv")
plot(education.num ~ education, data=income_evaluation)
# since higher education level can be completely explained by education years
# the variable higher education level is removed
income_evaluation = income_evaluation[,-c(4)]
income_evaluation %>% replace_with_na_all(condition = ~.x== "?")
library(naniar)
plot(education.num ~ education, data=income_evaluation)
# since higher education level can be completely explained by education years
# the variable higher education level is removed
income_evaluation = income_evaluation[,-c(4)]
income_evaluation %>% replace_with_na_all(condition = ~.x== "?")
income_evaluation <- read.csv("~/GitHub/ProjectAM/Data/adult.csv")
#1 Data treatment
plot(education.num ~ education, data=income_evaluation)
# since higher education level can be completely explained by education years
# the variable higher education level is removed
income_evaluation = income_evaluation[,-c(4)]
income_evaluation <- read.csv("~/GitHub/ProjectAM/Data/adult.csv")
plot(education.num ~ education, data=income_evaluation)
# since higher education level can be completely explained by education years
# the variable higher education level is removed
income_evaluation = income_evaluation[,-c(4)]
income_evaluation %>% replace_with_na_all(condition = ~.x== "?")
View(income_evaluation)
# replace all the ? with NA for simplicity
dt = income_evaluation %>% replace_with_na_all(condition = ~.x== "?")
View(dt)
income_evaluation3 <- read.csv("~/GitHub/ProjectAM/Data/income_evaluation.csv")
View(income_evaluation3)
income_evaluation <- read.csv("~/GitHub/ProjectAM/Data/adult.csv")
View(income_evaluation)
# since higher education level can be completely explained by education years
# the variable higher education level is removed
income_evaluation = income_evaluation[,-c(4)]
# replace all the ? with NA for simplicity
dt = income_evaluation %>% replace_with_na_all(condition = ~.x== "?")
levels(dt)
levels(dt$workclass)
class(dt$workclass)
income_evaluation <- read.csv("~/GitHub/ProjectAM/Data/adult.csv")
# since higher education level can be completely explained by education years
# the variable higher education level is removed
income_evaluation = income_evaluation[,-c(4)]
View(income_evaluation)
describe(income_evaluation)
describe(income_evaluation)
library(tidyverse)
library(dplyr)
library(naniar)
library(FactoMineR)
library(fitdistrplus)
library(Hmisc)
library(MASS)
describe(income_evaluation)
library(MASS)
library(Hmisc)
install.packages("Hmisc")
library(Hmisc)
library(dplyr)
describe(income_evaluation)
a=describe(income_evaluation)
View(a)
income_evaluation[1]
income_evaluation[1,2]
for(i in 1:nrow(income_evaluation)){
for (j in 1:ncol(income_evaluation)) {
if(income_evaluation[i,j]== "?"){income_evaluation[i,j]="NA"}
}}
View(income_evaluation)
# replace all the ? with NA for simplicity
dt = income_evaluation %>% replace_with_na_all(condition = ~.x== "?")
View(dt)
a=describe(income_evaluation)
describe(income_evaluation)
corMatrix <- cor(income_evaluation)
library(tidyverse)
library(lsr)
install.packages("lsr")
library(lsr)
f = function(x,y) {
tbl = df %>% select(x,y) %>% table()
chisq_pval = round(chisq.test(tbl)$p.value, 4)
cramV = round(cramersV(tbl), 4)
data.frame(x, y, chisq_pval, cramV) }
# create unique combinations of column names
# sorting will help getting a better plot (upper triangular)
df_comb = data.frame(t(combn(sort(names(income_evaluation)), 2)), stringsAsFactors = F)
df_res = map2_df(df_comb$X1, df_comb$X2, f)
# plot results
df_res %>%
ggplot(aes(x,y,fill=chisq_pval))+
geom_tile()+
geom_text(aes(x,y,label=cramV))+
scale_fill_gradient(low="red", high="yellow")+
theme_classic()
df_res = map2_df(df_comb$X1, df_comb$X2, f)
View(df_comb)
f = function(x,y) {
tbl = income_evaluation %>% select(x,y) %>% table()
chisq_pval = round(chisq.test(tbl)$p.value, 4)
cramV = round(cramersV(tbl), 4)
data.frame(x, y, chisq_pval, cramV) }
# apply function to each variable combination
df_res = map2_df(df_comb$X1, df_comb$X2, f)
f = function(x,y) {
tbl = income_evaluation %>% select(x,y) %>% table()
chisq_pval = round(chisq.test(tbl)$p.value, 4)
cramV = round(cramersV(tbl), 4)
data.frame(x, y, chisq_pval, cramV) }
df=income_evaluation
# create unique combinations of column names
# sorting will help getting a better plot (upper triangular)
df_comb = data.frame(t(combn(sort(names(df)), 2)), stringsAsFactors = F)
f = function(x,y) {
tbl = df %>% select(x,y) %>% table()
chisq_pval = round(chisq.test(tbl)$p.value, 4)
cramV = round(cramersV(tbl), 4)
data.frame(x, y, chisq_pval, cramV) }
# apply function to each variable combination
df_res = map2_df(df_comb$X1, df_comb$X2, f)
library(lsr)
# apply function to each variable combination
df_res = map2_df(df_comb$X1, df_comb$X2, f)
df <- data.frame(
group = c('A', 'A', 'A', 'A', 'A', 'B', 'C'),
student = c('01', '01', '01', '02', '02', '01', '02'),
exam_pass = c('Y', 'N', 'Y', 'N', 'Y', 'Y', 'N'),
subject = c('Math', 'Science', 'Japanese', 'Math', 'Science', 'Japanese', 'Math')
)
f = function(x,y) {
tbl = df %>% select(x,y) %>% table()
chisq_pval = round(chisq.test(tbl)$p.value, 4)
cramV = round(cramersV(tbl), 4)
data.frame(x, y, chisq_pval, cramV) }
# create unique combinations of column names
# sorting will help getting a better plot (upper triangular)
df_comb = data.frame(t(combn(sort(names(df)), 2)), stringsAsFactors = F)
View(df_comb)
# apply function to each variable combination
df_res = map2_df(df_comb$X1, df_comb$X2, f)
library(lsr)
df=income_evaluation
mixed_assoc = function(df, cor_method="spearman", adjust_cramersv_bias=TRUE){
df_comb = expand.grid(names(df), names(df),  stringsAsFactors = F) %>% set_names("X1", "X2")
is_nominal = function(x) class(x) %in% c("factor", "character")
# https://community.rstudio.com/t/why-is-purr-is-numeric-deprecated/3559
# https://github.com/r-lib/rlang/issues/781
is_numeric <- function(x) { is.integer(x) || is_double(x)}
f = function(xName,yName) {
x =  pull(df, xName)
y =  pull(df, yName)
result = if(is_nominal(x) && is_nominal(y)){
# use bias corrected cramersV as described in https://rdrr.io/cran/rcompanion/man/cramerV.html
cv = cramerV(as.character(x), as.character(y), bias.correct = adjust_cramersv_bias)
data.frame(xName, yName, assoc=cv, type="cramersV")
}else if(is_numeric(x) && is_numeric(y)){
correlation = cor(x, y, method=cor_method, use="complete.obs")
data.frame(xName, yName, assoc=correlation, type="correlation")
}else if(is_numeric(x) && is_nominal(y)){
# from https://stats.stackexchange.com/questions/119835/correlation-between-a-nominal-iv-and-a-continuous-dv-variable/124618#124618
r_squared = summary(lm(x ~ y))$r.squared
data.frame(xName, yName, assoc=sqrt(r_squared), type="anova")
}else if(is_nominal(x) && is_numeric(y)){
r_squared = summary(lm(y ~x))$r.squared
data.frame(xName, yName, assoc=sqrt(r_squared), type="anova")
}else {
warning(paste("unmatched column type combination: ", class(x), class(y)))
}
# finally add complete obs number and ratio to table
result %>% mutate(complete_obs_pairs=sum(!is.na(x) & !is.na(y)), complete_obs_ratio=complete_obs_pairs/length(x)) %>% rename(x=xName, y=yName)
}
# apply function to each variable combination
map2_df(df_comb$X1, df_comb$X2, f)
}
mixed_assoc(df)
library(lsr)
require(rcompanion)
install.packages("rcompanion")
mixed_assoc = function(df, cor_method="spearman", adjust_cramersv_bias=TRUE){
df_comb = expand.grid(names(df), names(df),  stringsAsFactors = F) %>% set_names("X1", "X2")
is_nominal = function(x) class(x) %in% c("factor", "character")
# https://community.rstudio.com/t/why-is-purr-is-numeric-deprecated/3559
# https://github.com/r-lib/rlang/issues/781
is_numeric <- function(x) { is.integer(x) || is_double(x)}
f = function(xName,yName) {
x =  pull(df, xName)
y =  pull(df, yName)
result = if(is_nominal(x) && is_nominal(y)){
# use bias corrected cramersV as described in https://rdrr.io/cran/rcompanion/man/cramerV.html
cv = cramerV(as.character(x), as.character(y), bias.correct = adjust_cramersv_bias)
data.frame(xName, yName, assoc=cv, type="cramersV")
}else if(is_numeric(x) && is_numeric(y)){
correlation = cor(x, y, method=cor_method, use="complete.obs")
data.frame(xName, yName, assoc=correlation, type="correlation")
}else if(is_numeric(x) && is_nominal(y)){
# from https://stats.stackexchange.com/questions/119835/correlation-between-a-nominal-iv-and-a-continuous-dv-variable/124618#124618
r_squared = summary(lm(x ~ y))$r.squared
data.frame(xName, yName, assoc=sqrt(r_squared), type="anova")
}else if(is_nominal(x) && is_numeric(y)){
r_squared = summary(lm(y ~x))$r.squared
data.frame(xName, yName, assoc=sqrt(r_squared), type="anova")
}else {
warning(paste("unmatched column type combination: ", class(x), class(y)))
}
# finally add complete obs number and ratio to table
result %>% mutate(complete_obs_pairs=sum(!is.na(x) & !is.na(y)), complete_obs_ratio=complete_obs_pairs/length(x)) %>% rename(x=xName, y=yName)
}
# apply function to each variable combination
map2_df(df_comb$X1, df_comb$X2, f)
}
mixed_assoc(df)
require(rcompanion)
library(rcompanion)
mixed_assoc(df)
# plot results
require(corrr)
install.packages("corrr")
msleep %>%
select(- name) %>%
mixed_assoc() %>%
select(x, y, assoc) %>%
spread(y, assoc) %>%
column_to_rownames("x") %>%
as.matrix %>%
as_cordf %>%
network_plot()
select(-name)
msleep %>%
select(-name) %>%
mixed_assoc() %>%
select(x, y, assoc) %>%
spread(y, assoc) %>%
column_to_rownames("x") %>%
as.matrix %>%
as_cordf %>%
network_plot()
# plot results
require(corrr)
msleep %>%
select(-name) %>%
mixed_assoc() %>%
select(x, y, assoc) %>%
spread(y, assoc) %>%
column_to_rownames("x") %>%
as.matrix %>%
as_cordf %>%
network_plot()
View(df_comb)
df_res = mixed_assoc(df)
View(df_res)
network_plot(df_res)
msleep %>%
select(- name) %>%
mixed_assoc() %>%
select(x, y, assoc) %>%
spread(y, assoc) %>%
column_to_rownames("x") %>%
as.matrix %>%
as_cordf %>%
network_plot()
msleep
df %>%
mixed_assoc() %>%
select(x, y, assoc) %>%
spread(y, assoc) %>%
column_to_rownames("x") %>%
as.matrix %>%
as_cordf %>%
network_plot()
df %>%
mixed_assoc() %>%
select(.x, .y, .assoc) %>%
spread(y, assoc) %>%
column_to_rownames("x") %>%
as.matrix %>%
as_cordf %>%
network_plot()
