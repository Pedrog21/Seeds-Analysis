warning(paste("unmatched column type combination: ", class(x), class(y)))
}
# finally add complete obs number and ratio to table
result %>% mutate(complete_obs_pairs=sum(!is.na(x) & !is.na(y)), complete_obs_ratio=complete_obs_pairs/length(x)) %>% rename(x=xName, y=yName)
}
# apply function to each variable combination
map2_df(df_comb$X1, df_comb$X2, f)
}
##Preliminary Analysis (Frank) --- Standardization, Plots...
#summary of the data
summary(seeds)
#Scaling variables
#seeds = cbind(scale(seeds[1:7]),seeds[8])
#conditional density estimate
ggplot(data = seeds, mapping = aes(x = area, fill= type,colour = type)) +
geom_density(alpha = 0.5,position = "fill")
d <- melt(seeds[])
ggplot(d,aes(x = value,fill= type,colour = type)) +
facet_wrap(~variable,scales = "free_x") +
geom_freqpoly()
ggplot(d,aes(x = value,fill= type,colour = type)) +
facet_wrap(~variable,scales = "free_x") +
geom_area(stat = "bin")
#conditional density estimate
ggplot(d,aes(x = value, fill = type,colour = type)) +
facet_wrap(~variable,scales = "free_x") +
geom_density(alpha = 0.5,position = "fill")
ggplot(data=seeds,mapping = aes(x=type)) +
geom_bar()        # we have the same amount of each type of plant
pairs(seeds,col=seeds[,8])
ggpairs(seeds, aes(colour = type, alpha = 0.4))
#correlation
df_res = mixed_assoc(seeds)
# plot results
#Correlation plots
corMatrix = df_res %>%
ggplot(aes(x,y,fill=assoc))+
geom_tile()+
# geom_text(aes(x,y,label=assoc))+
scale_fill_gradient(low="red", high="yellow")+
theme_classic()
corMatrix
corrplot(cor(seeds[1:7]), type = "upper", order = "hclust", tl.col = "black", tl.srt = 45)
seeds %>%
mixed_assoc() %>%
dplyr::select(x, y, assoc) %>%
spread(y, assoc) %>%
column_to_rownames("x") %>%
as.matrix %>%
as_cordf %>%
network_plot()
##Decision Tree--------------------------------------------------------------------------------
df = seeds
smp_size <- floor(0.75 * nrow(df))
train_ind <- sample(seq_len(nrow(df)), size = smp_size)
train <- df[train_ind, ]
test <- df[-train_ind, ]
#Build the model
dtfit <- rpart(type ~ area + perimeter + compactnes + length + width + asymmetry + length_groove, method="class", data=train)
plotcp(dtfit) #plot of the cross validation step to choose the complexity parameter (cp)
summary(dtfit)
plot(dtfit, uniform=TRUE,
main="DT with pca data")
text(dtfit, use.n=TRUE, all=TRUE, cex=.8) #plot of the tree
pred_dt <- predict(dtfit, test, type="class") #predictions
mtab<-table(pred_dt, test[,8])
confusionMatrix(mtab)
#Build the model
dtfit <- rpart(type ~ area + perimeter + compactnes + length + width + asymmetry + length_groove, method="class", data=train)
#Build the model
dtfit <- rpart(type ~ area + perimeter + compactness + length + width + asymmetry + length_groove, method="class", data=train)
plotcp(dtfit) #plot of the cross validation step to choose the complexity parameter (cp)
summary(dtfit)
plot(dtfit, uniform=TRUE,
main="DT with pca data")
text(dtfit, use.n=TRUE, all=TRUE, cex=.8) #plot of the tree
pred_dt <- predict(dtfit, test, type="class") #predictions
mtab<-table(pred_dt, test[,8])
confusionMatrix(mtab)
confusionMatrix(mtab)
plot(dtfit, uniform=TRUE,
main="DT with pca data")
df.pca = seeds.pca_df
smp_size <- floor(0.75 * nrow(df.pca))
train_ind <- sample(seq_len(nrow(df.pca)), size = smp_size)
train <- df.pca[train_ind, ]
test <- df.pca[-train_ind, ]
#Build the model
dtfit.pca <- rpart(type ~ PC1 + PC2 + PC3, method="class", data=train)
plotcp(dtfit.pca) #plot of the cross validation step to choose the complexity parameter (cp)
summary(dtfit.pca)
plot(dtfit.pca, uniform=TRUE,
main="DT with pca data")
#DT with pca
df.pca = seeds.pca_df
smp_size <- floor(0.75 * nrow(df.pca))
train_ind <- sample(seq_len(nrow(df.pca)), size = smp_size)
#DT with pca
df.pca = seeds.pca_df
seeds.pca <- prcomp(seeds[,1:7], center = TRUE, scale = TRUE)
summary(seeds.pca)
ggbiplot(seeds.pca)
summary(seeds.pca)
seeds.pca
plot(dtfit, uniform=TRUE,
main="DT without pca data")
text(dtfit, use.n=TRUE, all=TRUE, cex=.8) #plot of the tree
pred_dt <- predict(dtfit, test, type="class") #predictions
mtab<-table(pred_dt, test[,8])
confusionMatrix(mtab)
df.pca = seeds.pca_df
smp_size <- floor(0.75 * nrow(df.pca))
train_ind <- sample(seq_len(nrow(df.pca)), size = smp_size)
View(seeds.pca)
seeds.pca$x
dist_X = dist(X)
ward_clust = hclust(dist_X, method="ward.D2")
plot(ward_clust)
cut_ward = cutree(ward_clust, k = 3)
for (i in 1:210){
if (cut_ward[i]==2){
cut_ward[i] = 3
}
else if (cut_ward[i]==3){
cut_ward[i] = 2
}
}
#Hierarchical clustering with ward's distance
dist_X = dist(X)
ward_clust = hclust(dist_X, method="ward.D2")
X = seeds[1:7]
X_scaled = scale(X)
#Hierarchical clustering with ward's distance
dist_X = dist(X)
ward_clust = hclust(dist_X, method="ward.D2")
plot(ward_clust)
cut_ward = cutree(ward_clust, k = 3)
for (i in 1:210){
if (cut_ward[i]==2){
cut_ward[i] = 3
}
else if (cut_ward[i]==3){
cut_ward[i] = 2
}
}
dist_X_scaled = dist(X_scaled)
ward_clust_scaled = hclust(dist_X_scaled, method="ward.D2")
plot(ward_clust_scaled)
plot(ward_clust)
cut_ward_scaled = cutree(ward_clust_scaled, k = 3)
#Confusion matrix - ward's clustering
conf_matrix_ward = table(true=seeds$type,pred=cut_ward)
conf_matrix_ward
confusionMatrix(table(true=seeds$type,pred=cut_ward))
confusionMatrix(table(true=seeds$type,pred=cut_ward_scaled))  #scaled
acc_ward = tr(conf_matrix_ward)/210
print(paste("Ward's Clustering accuracy = ", toString(acc_ward)))
conf_matrix_ward_scaled
conf_matrix_ward_scaled = confusionMatrix(table(true=seeds$type,pred=cut_ward_scaled))  #scale
conf_matrix_ward_scaled
acc_ward_scaled = tr(conf_matrix_ward_scaled)/210
acc_ward_scaled = tr(conf_matrix_ward_scaled)/210
kmeans_clust = kmeans(X, 3, iter.max=50, nstart=10)
classes_kmeans = fitted(kmeans_clust, method="classes")
for (i in 1:210){
if (classes_kmeans[i]==2){
classes_kmeans[i] = 3
}
else if (classes_kmeans[i]==3){
classes_kmeans[i] = 2
}
}
#Confusion matrix - kmeans clustering
conf_matrix_kmeans = table(true=seeds$type,pred=classes_kmeans)
conf_matrix_kmeans
#Confusion matrix - kmeans clustering
conf_matrix_kmeans = table(true=seeds$type,pred=classes_kmeans)
conf_matrix_kmeans
#Accuracy - kmeans clustering
acc_kmeans = tr(conf_matrix_kmeans)/210
print(paste("KMeans Clustering accuracy = ", toString(acc_kmeans)))
classes_kmeans
mod(2,3)
install.packages("numbers")
library(numbers)
mod(2,3)
mod(3,3)
mod(1,3)
mod(4,3)
mod(0,2)
for (i in 1:3) {print(i)}
}
for (i in 1:3) {print(i)}
mod(2,2)
conf_matrix_ward
conf_matrix_ward
conf_matrix_ward =confusionMatrix(table(true=seeds$type,pred=cut_ward))
conf_matrix_ward
View(conf_matrix_ward)
conf_matrix_ward$overall[1]
conf_matrix_ward$overall[1]>0.5
conf_matrix_ward$overall[1]>0.9
replaceall()
install.packages("lares")
install.packages("Iares")
install.packages("lares")
library(stringr)
kmeans_clust = kmeans(X, 3, iter.max=50, nstart=10)
classes_kmeans = fitted(kmeans_clust, method="classes")
for (i in 3){
str_replace_all(classes_kmeans, mod(i-1,3)+1, mod(i,3)+1, quiet = TRUE)
conf_matrix =confusionMatrix(table(true=seeds$type,pred=classes_kmeans))
if (conf_matrix$overall[1]>0.3)
{ break }
}
for (i in 3){
str_replace_all(classes_kmeans, mod(i-1,3)+1, mod(i,3)+1)
conf_matrix =confusionMatrix(table(true=seeds$type,pred=classes_kmeans))
if (conf_matrix$overall[1]>0.3)
{ break }
}
classes_kmeans
str(classes_kmeans)
str_replace_all(classes_kmeans, mod(i-1,3)+1, mod(i,3)+1)
str_replace(classes_kmeans, mod(i-1,3)+1, mod(i,3)+1)
function(cl){
a=cl
conf_matrix =confusionMatrix(table(true=seeds$type,pred=cl))
h=conf_matrix$overall[1]
for (i in 3){
for(j in 1:length(c)){
if(cl[j]== mod(i-1,3)+1){cl[j]=mod(i,3)+1}
}
conf_matrix =confusionMatrix(table(true=seeds$type,pred=cl))
if (conf_matrix$overall[1]>h)
{a=cl}
}
return(cl)
}
kmeans_clust = kmeans(X, 3, iter.max=50, nstart=10)
classes_kmeans = fitted(kmeans_clust, method="classes")
conf_matrix_kmeans = table(true=seeds$type,pred=classes_kmeans)
conf_matrix_kmeans
#Confusion matrix - kmeans clustering
correct(classes_kmeans)
correct=function(cl){
a=cl
conf_matrix =confusionMatrix(table(true=seeds$type,pred=cl))
h=conf_matrix$overall[1]
for (i in 3){
for(j in 1:length(c)){
if(cl[j]== mod(i-1,3)+1){cl[j]=mod(i,3)+1}
}
conf_matrix =confusionMatrix(table(true=seeds$type,pred=cl))
if (conf_matrix$overall[1]>h)
{a=cl}
}
return(cl)
}
#Confusion matrix - kmeans clustering
correct(classes_kmeans)
#Confusion matrix - kmeans clustering
classes_kmeans=correct(classes_kmeans)
conf_matrix_kmeans = table(true=seeds$type,pred=classes_kmeans)
conf_matrix_kmeans
#Confusion matrix - kmeans clustering
classes_kmeans=correct(classes_kmeans)
kmeans_clust = kmeans(X, 3, iter.max=50, nstart=10)
classes_kmeans = fitted(kmeans_clust, method="classes")
classes_kmeans
correct=function(cl){
a=cl
conf_matrix =confusionMatrix(table(true=seeds$type,pred=cl))
h=conf_matrix$overall[1]
for (i in 3){
for(j in 1:length(c)){
if(cl[j]== mod(i-1,3)+1){cl[j]=mod(i,3)+1}
}
conf_matrix =confusionMatrix(table(true=seeds$type,pred=cl))
print(conf_matrix$overall[1])
if (conf_matrix$overall[1]>h)
{a=cl}
}
return(cl)
}
#Confusion matrix - kmeans clustering
classes_kmeans=correct(classes_kmeans)
#Confusion matrix - kmeans clustering
classes_kmeans=correct(classes_kmeans)
#Confusion matrix - kmeans clustering
classes_kmeans=correct(classes_kmeans)
for (i in 1:3){
for(j in 1:length(c)){
if(cl[j]== mod(i-1,3)+1){cl[j]=mod(i,3)+1}
}
conf_matrix =confusionMatrix(table(true=seeds$type,pred=cl))
print(conf_matrix$overall[1])
if (conf_matrix$overall[1]>h)
{a=cl}
}
return(cl)
}
correct=function(cl){
a=cl
conf_matrix =confusionMatrix(table(true=seeds$type,pred=cl))
h=conf_matrix$overall[1]
for (i in 1:3){
for(j in 1:length(c)){
if(cl[j]== mod(i-1,3)+1){cl[j]=mod(i,3)+1}
}
conf_matrix =confusionMatrix(table(true=seeds$type,pred=cl))
print(conf_matrix$overall[1])
if (conf_matrix$overall[1]>h)
{a=cl}
}
return(cl)
}
#Confusion matrix - kmeans clustering
classes_kmeans=correct(classes_kmeans)
#Confusion matrix - kmeans clustering
classes_kmeans=correct(classes_kmeans)
#Confusion matrix - kmeans clustering
classes_kmeans=correct(classes_kmeans)
#Confusion matrix - kmeans clustering
classes_kmeans=correct(classes_kmeans)
classes_kmeans = fitted(kmeans_clust, method="classes")
classes_kmeans
correct=function(cl){
a=cl
conf_matrix =confusionMatrix(table(true=seeds$type,pred=cl))
h=conf_matrix$overall[1]
for (i in 1:3){
for(j in 1:length(c)){
if(cl[j]== mod(i-1,3)+1){
cl[j]=mod(i,3)+1
if(cl[j] == mod(i,3)+1{cl[j]=mod(i-1,3)+1})
}
}
print(cl)
conf_matrix =confusionMatrix(table(true=seeds$type,pred=cl))
print(conf_matrix$overall[1])
if (conf_matrix$overall[1]>h)
{a=cl}
}
return(cl)
}
correct=function(cl){
a=cl
conf_matrix =confusionMatrix(table(true=seeds$type,pred=cl))
h=conf_matrix$overall[1]
for (i in 1:3){
for(j in 1:length(c)){
if(cl[j]== mod(i-1,3)+1){
cl[j]=mod(i,3)+1}
if(cl[j] == mod(i,3)+1){cl[j]=mod(i-1,3)+1}
}
print(cl)
conf_matrix =confusionMatrix(table(true=seeds$type,pred=cl))
print(conf_matrix$overall[1])
if (conf_matrix$overall[1]>h)
{a=cl}
}
return(cl)
}
classes_kmeans = fitted(kmeans_clust, method="classes")
#KMeans
kmeans_clust = kmeans(X, 3, iter.max=50, nstart=10)
classes_kmeans = fitted(kmeans_clust, method="classes")
conf_matrix_kmeans = table(true=seeds$type,pred=classes_kmeans)
conf_matrix_kmeans
#Confusion matrix - kmeans clustering
classes_kmeans=correct(classes_kmeans)
correct=function(cl){
a=cl
conf_matrix =confusionMatrix(table(true=seeds$type,pred=cl))
h=conf_matrix$overall[1]
for (i in 1:3){
for(j in 1:length(cl)){
if(cl[j]== mod(i-1,3)+1){
cl[j]=mod(i,3)+1}
if(cl[j] == mod(i,3)+1){cl[j]=mod(i-1,3)+1}
}
print(cl)
conf_matrix =confusionMatrix(table(true=seeds$type,pred=cl))
print(conf_matrix$overall[1])
if (conf_matrix$overall[1]>h)
{a=cl}
}
return(cl)
}
#Confusion matrix - kmeans clustering
classes_kmeans=correct(classes_kmeans)
#Confusion matrix - kmeans clustering
classes_kmeans=correct(classes_kmeans)
classes_kmeans = fitted(kmeans_clust, method="classes")
classes_kmeans
correct=function(cl){
a=cl
conf_matrix =confusionMatrix(table(true=seeds$type,pred=cl))
h=conf_matrix$overall[1]
for (i in 1:5){
for(j in 1:length(cl)){
if(cl[j]== mod(i-1,3)+1){
cl[j]=mod(i,3)+1}
if(cl[j] == mod(i,3)+1){cl[j]=mod(i-1,3)+1}
}
print(cl)
conf_matrix =confusionMatrix(table(true=seeds$type,pred=cl))
print(conf_matrix$overall[1])
if (conf_matrix$overall[1]>h)
{a=cl}
}
return(a)
}
#Confusion matrix - kmeans clustering
classes_kmeans=correct(classes_kmeans)
length(cl)
length(classes_kmeans)
classes_kmeans[63]== mod(i-1,3)+1
classes_kmeans[64]== mod(i-1,3)+1
classes_kmeans[65]== mod(i-1,3)+1
classes_kmeans = fitted(kmeans_clust, method="classes")
#KMeans
kmeans_clust = kmeans(X, 3, iter.max=50, nstart=10)
classes_kmeans = fitted(kmeans_clust, method="classes")
classes_kmeans
conf_matrix_kmeans = table(true=seeds$type,pred=classes_kmeans)
conf_matrix_kmeans
#Confusion matrix - kmeans clustering
classes_kmeans=correct(classes_kmeans)
correct=function(cl){
a=cl
conf_matrix =confusionMatrix(table(true=seeds$type,pred=cl))
h=conf_matrix$overall[1]
for (i in 1:5){
for(j in 1:length(cl)){
if(cl[j]== mod(i-1,3)+1){
cl[j]=mod(i,3)+1}
else if(cl[j] == mod(i,3)+1){
cl[j]=mod(i-1,3)+1}
}
print(cl)
conf_matrix =confusionMatrix(table(true=seeds$type,pred=cl))
print(conf_matrix$overall[1])
if (conf_matrix$overall[1]>h)
{a=cl}
}
return(a)
}
#Confusion matrix - kmeans clustering
classes_kmeans=correct(classes_kmeans)
conf_matrix_kmeans = table(true=seeds$type,pred=classes_kmeans)
conf_matrix_kmeans
conf_matrix_kmeans = table(true=seeds$type,pred=classes_kmeans)
conf_matrix_kmeans
confusionMatrix(table(true=seeds$type,pred=classes_kmeans))
correct=function(cl){
a=cl
conf_matrix =confusionMatrix(table(true=seeds$type,pred=cl))
h=conf_matrix$overall[1]
for (i in 1:5){
for(j in 1:length(cl)){
if(cl[j]== mod(i-1,3)+1){
cl[j]=mod(i,3)+1}
else if(cl[j] == mod(i,3)+1){
cl[j]=mod(i-1,3)+1}
}
print(cl)
conf_matrix =confusionMatrix(table(true=seeds$type,pred=cl))
print(conf_matrix$overall[1])
if (conf_matrix$overall[1]>h)
{ h= conf_matrix$overall[1]
a=cl}
}
return(a)
}
kmeans_clust = kmeans(X, 3, iter.max=50, nstart=10)
classes_kmeans = fitted(kmeans_clust, method="classes")
conf_matrix_kmeans = table(true=seeds$type,pred=classes_kmeans)
conf_matrix_kmeans
#Confusion matrix - kmeans clustering
classes_kmeans=correct(classes_kmeans)
conf_matrix_kmeans = table(true=seeds$type,pred=classes_kmeans)
conf_matrix_kmeans
#Accuracy - kmeans clustering
acc_kmeans = tr(conf_matrix_kmeans)/210
print(paste("KMeans Clustering accuracy = ", toString(acc_kmeans)))
kmeans_clust = kmeans(X, 3, iter.max=50, nstart=10)
classes_kmeans = fitted(kmeans_clust, method="classes")
#Confusion matrix - kmeans clustering
classes_kmeans=correct(classes_kmeans)
conf_matrix_kmeans = table(true=seeds$type,pred=classes_kmeans)
conf_matrix_kmeans
correct=function(cl){
a=cl
conf_matrix =confusionMatrix(table(true=seeds$type,pred=cl))
h=conf_matrix$overall[1]
for (i in 1:6){
for(j in 1:length(cl)){
if(cl[j]== mod(i-1,3)+1){
cl[j]=mod(i,3)+1}
else if(cl[j] == mod(i,3)+1){
cl[j]=mod(i-1,3)+1}
}
conf_matrix =confusionMatrix(table(true=seeds$type,pred=cl))
print(conf_matrix$overall[1])
if (conf_matrix$overall[1]>h)
{ h= conf_matrix$overall[1]
a=cl}
}
return(a)
}
